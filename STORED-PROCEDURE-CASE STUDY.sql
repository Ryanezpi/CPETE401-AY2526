CREATE TABLE ORDERS ( 
  ORDER_NO INT PRIMARY KEY AUTO_INCREMENT,
  CUSTOMER_NAME VARCHAR(100),
  DATE  DATE
);

CREATE TABLE ORDER_DETAILS (
  ORDER_DETAIL_ID INT PRIMARY KEY AUTO_INCREMENT,
  ORDER_NO INT,
  ITEM_NAME VARCHAR(100),
  QUANTITY DECIMAL(12,2),
  PRICE DECIMAL(12,2),
  AMOUNT DECIMAL(12,2)
);

LAST_INSERT_ID()

DELIMITER //

CREATE PROCEDURE createOrder (IN VAR_CUS_NAME VARCHAR(100), 
OUT VAR_ORDER_NO INT)
BEGIN
  
  INSERT INTO ORDERS VALUES (NULL, VAR_CUS_NAME, NOW());
  SET VAR_ORDER_NO = LAST_INSERT_ID();

END//


CREATE PROCEDURE addItem(IN VAR_ORDER_NO INT, 
  IN VAR_ITEM_NAME VARCHAR(100),
 IN VAR_QUANTITY DECIMAL(12,2), 
 IN VAR_PRICE DECIMAL(12,2))
BEGIN
  DECLARE VAR_TOTAL_AMOUNT DECIMAL(12,2) DEFAULT 0;
  INSERT INTO ORDER_DETAILS VALUES (NULL, VAR_ORDER_NO,
    VAR_ITEM_NAME, VAR_QUANTITY, VAR_PRICE, VAR_PRICE * VAR_QUANTITY );

  SELECT IFNULL(SUM(AMOUNT),0) INTO VAR_TOTAL_AMOUNT FROM 
  ORDER_DETAILS WHERE ORDER_NO = VAR_ORDER_NO;

  UPDATE ORDERS SET TOTAL_AMOUNT = VAR_TOTAL_AMOUNT
    WHERE ORDER_NO = VAR_ORDER_NO;

END//

call addItem(@order_no, 'Product A',1,10);

CREATE PROCEDURE closeOrder (IN VAR_CASH DECIMAL(12,2), 
  IN VAR_ORDER_NO INT)
BEGIN
  DECLARE VAR_TOTAL_AMOUNT DECIMAL(12,2);
  DECLARE VAR_CHANGE DECIMAL(12,2);
  SELECT TOTAL_AMOUNT INTO VAR_TOTAL_AMOUNT FROM ORDERS WHERE 
  ORDER_NO = VAR_ORDER_NO;

  IF VAR_CASH >= VAR_TOTAL_AMOUNT THEN
    SET VAR_CHANGE = VAR_CASH - VAR_TOTAL_AMOUNT;

    UPDATE ORDERS SET CHANGE_AMOUNT = VAR_CHANGE, CASH = VAR_CASH
      WHERE ORDER_NO = VAR_ORDER_NO;
  ELSE
    -- ERROR
    SELECT 'CASH SHOULD BE MORE THAN TOTAL AMOUNT' AS ERROR;
  END IF;
END//
call closeOrder(10, @order_no)//








